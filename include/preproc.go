// Code generated by genobf.go. DO NOT EDIT.
// this code is for the main_test_output.go

package include

var obfMap = map[string]func() string{
	"OBF_13A91E13D1BF3834": OBF_13A91E13D1BF3834,
	"OBF_79AEC94396C55A83": OBF_79AEC94396C55A83,
	"OBF_7C8D88AF83F9FFE5": OBF_7C8D88AF83F9FFE5,
	"OBF_91628FA6A512EF9C": OBF_91628FA6A512EF9C,
	"OBF_E36AB4D93CD2C0BE": OBF_E36AB4D93CD2C0BE,
}


// OBF_13A91E13D1BF3834 returns the deobfuscated string: Hello, world!
func OBF_13A91E13D1BF3834() string {
	var result []byte
	data := []byte{ 0x19, 0x34, 0x3D, 0x3D, 0x3E, 0x7D, 0x71, 0x26, 0x3E, 0x23, 0x3D, 0x35, 0x70 }
	key := byte(0x51)
	result = make([]byte, len(data))
	for i := range data {
		result[i] = data[i] ^ key
	}
	return string(result)
}

// OBF_79AEC94396C55A83 returns the deobfuscated string: kernel32.dll
func OBF_79AEC94396C55A83() string {
	var result []byte
	data := []byte{ 0x91, 0x9F, 0x88, 0x94, 0x9F, 0x96, 0xC9, 0xC8, 0xD4, 0x9E, 0x96, 0x96 }
	key := byte(0xFA)
	result = make([]byte, len(data))
	for i := range data {
		result[i] = data[i] ^ key
	}
	return string(result)
}

// OBF_7C8D88AF83F9FFE5 returns the deobfuscated string: GetProcAddress
func OBF_7C8D88AF83F9FFE5() string {
	var result []byte
	data := []byte{ 0x85, 0xA7, 0xB6, 0x92, 0xB0, 0xAD, 0xA1, 0x83, 0xA6, 0xA6, 0xB0, 0xA7, 0xB1, 0xB1 }
	key := byte(0xC2)
	result = make([]byte, len(data))
	for i := range data {
		result[i] = data[i] ^ key
	}
	return string(result)
}

// OBF_91628FA6A512EF9C returns the deobfuscated string: Short WinAPI demo
func OBF_91628FA6A512EF9C() string {
	var result []byte
	data := []byte{ 0x07, 0x3C, 0x3B, 0x26, 0x20, 0x74, 0x03, 0x3D, 0x3A, 0x15, 0x04, 0x1D, 0x74, 0x30, 0x31, 0x39, 0x3B }
	key := byte(0x54)
	result = make([]byte, len(data))
	for i := range data {
		result[i] = data[i] ^ key
	}
	return string(result)
}

// OBF_E36AB4D93CD2C0BE returns the deobfuscated string: Sum is:
func OBF_E36AB4D93CD2C0BE() string {
	var result []byte
	data := []byte{ 0x92, 0xB4, 0xAC, 0xE1, 0xA8, 0xB2, 0xFB }
	key := byte(0xC1)
	result = make([]byte, len(data))
	for i := range data {
		result[i] = data[i] ^ key
	}
	return string(result)
}
